/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Orcamento;

import ModelTableCores.CorNaLinhaNotebookCar;
import ModelTableCores.CorNaLinhaOutros;
import TableModels.ProdutosModelsOrcamento;
import TablesGetSetters.ProdutosPP;
import TablesGetSetters.ProdutosPPOrc;
import br.com.tanamao.dal.ModuloConexao;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import net.proteanit.sql.DbUtils;
import static pagesCadastro.NewOrcamento.btAddProdutoOrc;
import static pagesCadastro.NewOrcamento.tableCarOrcamento;
import static pagesCadastro.NewOrcamento.txTotalOrcamento;

/**
 *
 * @author hugogabriel
 */
public class SelectProdutosOrcamento extends javax.swing.JFrame {

    Connection conexao = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    double total, preco, subtotal, superTotal;
    int qtd;

    ProdutosModelsOrcamento modelo;

    public SelectProdutosOrcamento() {
        initComponents();
        conexao = ModuloConexao.conector();
        setIcon();

        tableOutrosOrc.getTableHeader().setResizingAllowed(false);
        tableOutrosOrc.getTableHeader().setReorderingAllowed(false);

        TableFindProdutoOrc.getTableHeader().setResizingAllowed(false);
        TableFindProdutoOrc.getTableHeader().setReorderingAllowed(false);

        spnQtd.setValue(1);
        colocarDadosOutros();
        colocarDadosNotebook();
    }

    public void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/src/mark 2.7.png")));
    }

    public void colocarDadosOutros() {
        String sql = "select idpartepecas as ID,descricao as Descricao,codigob as CODB,nserie as SerialN,marca as Marca,precovenda as Preco,qtde as Estoque from partepecas order by descricao";
        try {
            pst = conexao.prepareStatement(sql);

            rs = pst.executeQuery();
            tableOutrosOrc.setModel(DbUtils.resultSetToTableModel(rs));
            tableOutrosOrc.getColumnModel().getColumn(0).setMaxWidth(60);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }

    public void colocarDadosNotebook() {
        String sql = "select idnotebooks as ID,descricao as Descricao,codebar as CODB, nserial as SerialN,marca as Marca,precov as Preco,qtde as Estoque from notebooks order by descricao";
        try {
            pst = conexao.prepareStatement(sql);

            rs = pst.executeQuery();
            TableFindProdutoOrc.setModel(DbUtils.resultSetToTableModel(rs));
            TableFindProdutoOrc.getColumnModel().getColumn(0).setMaxWidth(60);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txQtdeN = new javax.swing.JTextField();
        txtSubtotalN = new javax.swing.JTextField();
        txQtdeO = new javax.swing.JTextField();
        txSubtotalO = new javax.swing.JTextField();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        TabPanelProdutosorc = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableFindProdutoOrc = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableDesktopOrc = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableMonitorOrc = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableServidorOrc = new javax.swing.JTable();
        scrollOutros = new javax.swing.JScrollPane();
        tableOutrosOrc = new javax.swing.JTable();
        buttonAddOrc = new javax.swing.JButton();
        spnQtd = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txProcurar = new textFieldSearch.TextFieldSearchOption();
        buttonAddpromo = new javax.swing.JButton();

        txQtdeN.setText("jTextField6");

        txtSubtotalN.setText("jTextField1");

        txQtdeO.setText("jTextField1");

        txSubtotalO.setText("jTextField2");

        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowDeactivated(java.awt.event.WindowEvent evt) {
                formWindowDeactivated(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        TabPanelProdutosorc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabPanelProdutosorcMouseClicked(evt);
            }
        });

        TableFindProdutoOrc = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex,int colIndex){
                return false;
            }
        };
        TableFindProdutoOrc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "DESCRICAO", "SERIAL", "PRECO", "QTDE"
            }
        ));
        TableFindProdutoOrc.setEditingRow(0);
        TableFindProdutoOrc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableFindProdutoOrcMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                TableFindProdutoOrcMouseEntered(evt);
            }
        });
        jScrollPane2.setViewportView(TableFindProdutoOrc);

        TabPanelProdutosorc.addTab("Notebooks", jScrollPane2);

        tableDesktopOrc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "MARCA", "SERIAL"
            }
        ));
        tableDesktopOrc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableDesktopOrcMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tableDesktopOrcMouseEntered(evt);
            }
        });
        jScrollPane3.setViewportView(tableDesktopOrc);

        TabPanelProdutosorc.addTab("Desktop", jScrollPane3);

        tableMonitorOrc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "MARCA", "SERIAL"
            }
        ));
        tableMonitorOrc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMonitorOrcMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tableMonitorOrcMouseEntered(evt);
            }
        });
        jScrollPane5.setViewportView(tableMonitorOrc);

        TabPanelProdutosorc.addTab("Monitores", jScrollPane5);

        tableServidorOrc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "MARCA", "SERIAL"
            }
        ));
        tableServidorOrc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableServidorOrcMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tableServidorOrcMouseEntered(evt);
            }
        });
        jScrollPane6.setViewportView(tableServidorOrc);

        TabPanelProdutosorc.addTab("Servidores", jScrollPane6);

        tableOutrosOrc = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex,int colIndex){
                return false;
            }
        };
        tableOutrosOrc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "DESCRICAO", "CODB", "MARCA", "SERIAL", "PRECO", "QTDE"
            }
        ));
        tableOutrosOrc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableOutrosOrcMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                tableOutrosOrcMouseEntered(evt);
            }
        });
        scrollOutros.setViewportView(tableOutrosOrc);

        TabPanelProdutosorc.addTab("Outros", scrollOutros);

        buttonAddOrc.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        buttonAddOrc.setIcon(new javax.swing.ImageIcon(getClass().getResource("/src/CARRINHO_OFF.png"))); // NOI18N
        buttonAddOrc.setText("Adicionar ao carrinho");
        buttonAddOrc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddOrcActionPerformed(evt);
            }
        });

        spnQtd.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel1.setText("QUANTIDADE");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/src/estoque-2.png"))); // NOI18N

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 51));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/src/botao-de-rebobinar.png"))); // NOI18N
        jLabel3.setText("Itens sem estoque disponível!");

        txProcurar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txProcurarKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txProcurarKeyReleased(evt);
            }
        });

        buttonAddpromo.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        buttonAddpromo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/src/etiqueta-de-desconto.png"))); // NOI18N
        buttonAddpromo.setText("Adicionar com promoção");
        buttonAddpromo.setEnabled(false);
        buttonAddpromo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddpromoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(TabPanelProdutosorc, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(buttonAddpromo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(spnQtd, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addComponent(buttonAddOrc))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txProcurar, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txProcurar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(TabPanelProdutosorc, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonAddOrc)
                            .addComponent(jLabel1)
                            .addComponent(spnQtd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(buttonAddpromo)
                        .addGap(0, 10, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void TableFindProdutoOrcMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableFindProdutoOrcMouseClicked
        int setarNotes = TableFindProdutoOrc.getSelectedRow();
        int GetEstoque = Integer.parseInt(TableFindProdutoOrc.getModel().getValueAt(setarNotes, 6).toString());
        try {
            if (GetEstoque == 0) {
                spnQtd.setModel(new SpinnerNumberModel(0, 0, 0, 0));
            } else {
                spnQtd.setModel(new SpinnerNumberModel(1, 1, GetEstoque, 1));
            }
        } catch (Exception e) {
            System.out.println(e);
        }


    }//GEN-LAST:event_TableFindProdutoOrcMouseClicked

    private void TableFindProdutoOrcMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableFindProdutoOrcMouseEntered

    }//GEN-LAST:event_TableFindProdutoOrcMouseEntered

    private void tableDesktopOrcMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDesktopOrcMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableDesktopOrcMouseClicked

    private void tableDesktopOrcMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDesktopOrcMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_tableDesktopOrcMouseEntered

    private void tableMonitorOrcMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMonitorOrcMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableMonitorOrcMouseClicked

    private void tableMonitorOrcMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMonitorOrcMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_tableMonitorOrcMouseEntered

    private void tableServidorOrcMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableServidorOrcMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tableServidorOrcMouseClicked

    private void tableServidorOrcMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableServidorOrcMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_tableServidorOrcMouseEntered

    private void tableOutrosOrcMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOutrosOrcMouseClicked

        int setarNote = tableOutrosOrc.getSelectedRow();
        int GetEstoque = Integer.parseInt(tableOutrosOrc.getModel().getValueAt(setarNote, 6).toString());
        try {
            if (GetEstoque == 0) {
                spnQtd.setModel(new SpinnerNumberModel(0, 0, 0, 0));
            } else {
                spnQtd.setModel(new SpinnerNumberModel(1, 1, GetEstoque, 1));
            }
        } catch (Exception e) {
            System.out.println(e);
        }

    }//GEN-LAST:event_tableOutrosOrcMouseClicked

    private void tableOutrosOrcMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableOutrosOrcMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_tableOutrosOrcMouseEntered

    private void buttonAddOrcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddOrcActionPerformed
        int getselect = TabPanelProdutosorc.getSelectedIndex();
        ProdutosPPOrc POrc = new ProdutosPPOrc();

        if (getselect == 0) {

            int setarNote = TableFindProdutoOrc.getSelectedRow();

            if (setarNote >= 0) {
                Object nPreco = TableFindProdutoOrc.getModel().getValueAt(setarNote, 5);
                String nPrecoFormated = nPreco.toString().replace(".", "").replace(",", ".");
                qtd = Integer.parseInt(spnQtd.getValue().toString());
                preco = Double.parseDouble(nPrecoFormated);
                txQtdeN.setText(spnQtd.getValue().toString());

                superTotal = Double.parseDouble(txTotalOrcamento.getText());
                subtotal = qtd * preco;

                total = superTotal + subtotal;

                txtSubtotalN.setText(String.valueOf(subtotal));

                int GetEstoque = Integer.parseInt(TableFindProdutoOrc.getModel().getValueAt(setarNote, 6).toString());

                if (GetEstoque <= 0) {
                    JOptionPane.showMessageDialog(null, "Produto sem estoque disponível!!");

                } else {
                    POrc.setID(TableFindProdutoOrc.getModel().getValueAt(setarNote, 0).toString());
                    POrc.setProduto("Notebook");
                    POrc.setDescricao(TableFindProdutoOrc.getModel().getValueAt(setarNote, 1).toString());
                    POrc.setCodb(TableFindProdutoOrc.getModel().getValueAt(setarNote, 2).toString());
                    POrc.setSerial(TableFindProdutoOrc.getModel().getValueAt(setarNote, 3).toString());
                    POrc.setMarca(TableFindProdutoOrc.getModel().getValueAt(setarNote, 4).toString());
                    POrc.setPreco(TableFindProdutoOrc.getModel().getValueAt(setarNote, 5).toString());
                    POrc.setQtde(txQtdeN.getText());
                    POrc.setSubtotal(txtSubtotalN.getText());

                    modelo = (ProdutosModelsOrcamento) tableCarOrcamento.getModel();
                    tableCarOrcamento.setModel(modelo);
                    modelo.addProdutosPP(POrc);
                    txTotalOrcamento.setText(String.valueOf(total));

//                    Object obje = new Object();
//                    int qtde = Integer.parseInt(spnQtd.getValue().toString());
//                    int qtdAtt = GetEstoque - qtd;
//                    String getAtualizaqtde = Integer.toString(qtdAtt);
//                    obje = getAtualizaqtde;
//                    TableFindProdutoOrc.getModel().setValueAt(obje, setarNote, 6);
                }

            } else {

                JOptionPane.showMessageDialog(null, "Nenhuma linha selecionada!!");

            }
        }

        if (getselect == 4) {

            ProdutosPPOrc Orc = new ProdutosPPOrc();
            int setarOutros = tableOutrosOrc.getSelectedRow();

            if (setarOutros >= 0) {
                Object OPreco = tableOutrosOrc.getModel().getValueAt(setarOutros, 5);
                String nPrecoFormated = OPreco.toString().replace(".", "").replace(",", ".");
                qtd = (int) spnQtd.getValue();
                preco = Double.parseDouble(nPrecoFormated);
                txQtdeO.setText(spnQtd.getValue().toString());

                superTotal = Double.parseDouble(txTotalOrcamento.getText());
                subtotal = qtd * preco;

                total = superTotal + subtotal;

                txSubtotalO.setText(String.valueOf(subtotal));

                int GetEstoque = Integer.parseInt(tableOutrosOrc.getModel().getValueAt(setarOutros, 6).toString());

                if (GetEstoque <= 0) {
                    JOptionPane.showMessageDialog(null, "Produto sem estoque disponivel!!");
                } else {

                    Orc.setID(tableOutrosOrc.getModel().getValueAt(setarOutros, 0).toString());
                    Orc.setProduto("Outros");
                    Orc.setDescricao(tableOutrosOrc.getModel().getValueAt(setarOutros, 1).toString());
                    Orc.setCodb(tableOutrosOrc.getModel().getValueAt(setarOutros, 2).toString());
                    Orc.setSerial(tableOutrosOrc.getModel().getValueAt(setarOutros, 3).toString());
                    Orc.setMarca(tableOutrosOrc.getModel().getValueAt(setarOutros, 4).toString());
                    Orc.setPreco(tableOutrosOrc.getModel().getValueAt(setarOutros, 5).toString());
                    Orc.setQtde(txQtdeO.getText());
                    Orc.setSubtotal(txSubtotalO.getText());

                    modelo = (ProdutosModelsOrcamento) tableCarOrcamento.getModel();
                    tableCarOrcamento.setModel(modelo);
                    modelo.addProdutosPP(Orc);
                    txTotalOrcamento.setText(String.valueOf(total));

                    Object obj = new Object();

                    int qtd = Integer.parseInt(spnQtd.getValue().toString());
                    int qtdAtualizada = GetEstoque - qtd;
                    String getAtualizaQTDE = Integer.toString(qtdAtualizada);
                    obj = getAtualizaQTDE;
                    tableOutrosOrc.getModel().setValueAt(obj, setarOutros, 6);

                }

            } else {

                JOptionPane.showMessageDialog(null, "Nenhuma linha selecionada!!");

            }
        }
    }//GEN-LAST:event_buttonAddOrcActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        btAddProdutoOrc.setEnabled(true);
    }//GEN-LAST:event_formWindowClosed

    private void TabPanelProdutosorcMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabPanelProdutosorcMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TabPanelProdutosorcMouseClicked

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentHidden

    private void formWindowDeactivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowDeactivated
        // TODO add your handling code here:
        btAddProdutoOrc.setEnabled(true);
    }//GEN-LAST:event_formWindowDeactivated

    private void txProcurarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txProcurarKeyPressed
        // TODO add your handling code here:
//        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//            int getselect = TabPanelProdutos.getSelectedIndex();
//            ProdutosPP P = new ProdutosPP();
//
//            if (getselect == 0) {
//
//                int setarNote = TableFindProduto.getRowCount();
//
//                if (setarNote == 0) {
//                    Object nPreco = TableFindProduto.getModel().getValueAt(setarNote, 5);
//                    String nPrecoFormated = nPreco.toString().replace(".", "").replace(",", ".");
//                    qtd = Integer.parseInt(spnQtd.getValue().toString());
//                    preco = Double.parseDouble(nPrecoFormated);
//                    txQtdeN.setText(spnQtd.getValue().toString());
//
//                    superTotal = Double.parseDouble(PDV.txTotal.getText());
//                    subtotal = qtd * preco;
//
//                    total = superTotal + subtotal;
//
//                    txtSubtotalN.setText(String.valueOf(subtotal));
//
//                    int GetEstoque = Integer.parseInt(TableFindProduto.getModel().getValueAt(setarNote, 7).toString());
//
//                    if (GetEstoque <= 0) {
//                        JOptionPane.showMessageDialog(null, "Produto sem estoque disponível!!");
//
//                    } else {
//                        P.setID(TableFindProduto.getModel().getValueAt(setarNote, 0).toString());
//                        P.setProduto("Notebook");
//                        P.setDescricao(TableFindProduto.getModel().getValueAt(setarNote, 1).toString());
//                        P.setCodb(TableFindProduto.getModel().getValueAt(setarNote, 2).toString());
//                        P.setSerial(TableFindProduto.getModel().getValueAt(setarNote, 3).toString());
//                        P.setMarca(TableFindProduto.getModel().getValueAt(setarNote, 4).toString());
//                        P.setPreco(TableFindProduto.getModel().getValueAt(setarNote, 5).toString());
//                        P.setQtde(txQtdeN.getText());
//                        P.setSubtotal(txtSubtotalN.getText());
//
//                        modelo = (ProdutosModels) TableCar.getModel();
//                        TableCar.setModel(modelo);
//                        modelo.addProdutosPP(P);
//                        PDV.txTotal.setText(String.valueOf(total));
//
//                        Object obje = new Object();
//                        int qtde = Integer.parseInt(spnQtd.getValue().toString());
//                        int qtdAtt = GetEstoque - qtd;
//                        String getAtualizaqtde = Integer.toString(qtdAtt);
//                        obje = getAtualizaqtde;
//                        TableFindProduto.getModel().setValueAt(obje, setarNote, 7);
//                    }
//
//                } else {
//
//                    JOptionPane.showMessageDialog(null, "Nenhuma linha selecionada!!");
//
//                }
//            }
//
//            if (getselect == 4) {
//
//                ProdutosPP O = new ProdutosPP();
//
//                int setarOutros = TableFindProduto.getRowCount();
//
//                if (setarOutros == 0) {
//                    Object OPreco = tableOutros.getModel().getValueAt(setarOutros, 5);
//                    String nPrecoFormated = OPreco.toString().replace(".", "").replace(",", ".");
//                    qtd = (int) spnQtd.getValue();
//                    preco = Double.parseDouble(nPrecoFormated);
//                    txQtdeO.setText(spnQtd.getValue().toString());
//
//                    superTotal = Double.parseDouble(PDV.txTotal.getText());
//                    subtotal = qtd * preco;
//
//                    total = superTotal + subtotal;
//
//                    txSubtotalO.setText(String.valueOf(subtotal));
//
//                    int GetEstoque = Integer.parseInt(tableOutros.getModel().getValueAt(setarOutros, 7).toString());
//
//                    if (GetEstoque <= 0) {
//                        JOptionPane.showMessageDialog(null, "Produto sem estoque disponivel!!");
//                    } else {
//
//                        O.setID(tableOutros.getModel().getValueAt(setarOutros, 0).toString());
//                        O.setProduto("Outros");
//                        O.setDescricao(tableOutros.getModel().getValueAt(setarOutros, 1).toString());
//                        O.setCodb(tableOutros.getModel().getValueAt(setarOutros, 2).toString());
//                        O.setSerial(tableOutros.getModel().getValueAt(setarOutros, 3).toString());
//                        O.setMarca(tableOutros.getModel().getValueAt(setarOutros, 4).toString());
//                        O.setPreco(tableOutros.getModel().getValueAt(setarOutros, 5).toString());
//                        O.setQtde(txQtdeO.getText());
//                        O.setSubtotal(txSubtotalO.getText());
//
//                        modelo = (ProdutosModels) TableCar.getModel();
//                        TableCar.setModel(modelo);
//                        modelo.addProdutosPP(O);
//                        PDV.txTotal.setText(String.valueOf(total));
//
//                        Object obj = new Object();
//
//                        int qtd = Integer.parseInt(spnQtd.getValue().toString());
//                        int qtdAtualizada = GetEstoque - qtd;
//                        String getAtualizaQTDE = Integer.toString(qtdAtualizada);
//                        obj = getAtualizaQTDE;
//                        tableOutros.getModel().setValueAt(obj, setarOutros, 7);
//                        txProcurar.setText(null);
//
//                    }
//
//                } else {
//
//                    JOptionPane.showMessageDialog(null, "Nenhum produto encontrado!!");
//
//                }
//            }
//        }
    }//GEN-LAST:event_txProcurarKeyPressed

    private void txProcurarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txProcurarKeyReleased
        // TODO add your handling code here:
//        int getselect = TabPanelProdutos.getSelectedIndex();
//        if (getselect == 4) {
//            if (empresa.getText().equals("tanamao")) {
//                if (txProcurar.isSelected()) {
//                    int option = txProcurar.getSelectedIndex();
//                    String text = "%" + txProcurar.getText() + "%";
//                    if (option == 0) {
//                        pesquisar_PPtnm("where empresa ='tanamao' and (codigob like ? or ref like ? or nserie like ?)", text, text, text);
//                    } else if (option == 1) {
//                        pesquisar_PPtnm("where descricao like ? and empresa ='tanamao'", text);
//                    } else if (option == 2) {
//                        pesquisar_PPtnm("where empresa ='tanamao' and (grupo like ? or marca like ? or modelo like ?)", text, text, text);
//                    } else if (option == 3) {
//                        pesquisar_PPtnm("where forne like ? and empresa ='tanamao'", text);
//                    }
//                }
//            }
//            if (empresa.getText().equals("docatec")) {
//                if (txProcurar.isSelected()) {
//                    int option = txProcurar.getSelectedIndex();
//                    String text = "%" + txProcurar.getText() + "%";
//                    if (option == 0) {
//                        pesquisar_PPdc("where empresa ='docatec' and (codigob like ? or ref like ? or nserie like ?)", text, text, text);
//                    } else if (option == 1) {
//                        pesquisar_PPdc("where descricao like ? and empresa ='docatec'", text);
//                    } else if (option == 2) {
//                        pesquisar_PPdc("where empresa ='docatec' and (grupo like ? or marca like ? or modelo like ?)", text, text, text);
//                    } else if (option == 3) {
//                        pesquisar_PPdc("where forne like ? and empresa ='docatec'", text);
//                    }
//                }
//            }
//        }
    }//GEN-LAST:event_txProcurarKeyReleased

    private void buttonAddpromoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddpromoActionPerformed
//        int getselect = TabPanelProdutos.getSelectedIndex();
//        ProdutosPP P = new ProdutosPP();
//
//        if (getselect == 0) {
//
//            int setarNote = TableFindProduto.getSelectedRow();
//
//            if (setarNote >= 0) {
//                Object nPreco = TableFindProduto.getModel().getValueAt(setarNote, 5);
//                String nPrecoFormated = nPreco.toString().replace(".", "").replace(",", ".");
//                qtd = Integer.parseInt(spnQtd.getValue().toString());
//                preco = Double.parseDouble(nPrecoFormated);
//                txQtdeN.setText(spnQtd.getValue().toString());
//
//                superTotal = Double.parseDouble(PDV.txTotal.getText());
//                subtotal = qtd * preco;
//
//                total = superTotal + subtotal;
//
//                txtSubtotalN.setText(String.valueOf(subtotal));
//
//                int GetEstoque = Integer.parseInt(TableFindProduto.getModel().getValueAt(setarNote, 7).toString());
//
//                if (GetEstoque <= 0) {
//                    JOptionPane.showMessageDialog(null, "Produto sem estoque disponível!!");
//
//                } else {
//                    P.setID(TableFindProduto.getModel().getValueAt(setarNote, 0).toString());
//                    P.setProduto("Notebook");
//                    P.setDescricao(TableFindProduto.getModel().getValueAt(setarNote, 1).toString());
//                    P.setCodb(TableFindProduto.getModel().getValueAt(setarNote, 2).toString());
//                    P.setSerial(TableFindProduto.getModel().getValueAt(setarNote, 3).toString());
//                    P.setMarca(TableFindProduto.getModel().getValueAt(setarNote, 4).toString());
//                    P.setPreco(TableFindProduto.getModel().getValueAt(setarNote, 5).toString());
//                    P.setQtde(txQtdeN.getText());
//                    P.setSubtotal(txtSubtotalN.getText());
//
//                    modelo = (ProdutosModels) TableCar.getModel();
//                    TableCar.setModel(modelo);
//                    modelo.addProdutosPP(P);
//                    PDV.txTotal.setText(String.valueOf(total));
//
//                    Object obje = new Object();
//                    int qtde = Integer.parseInt(spnQtd.getValue().toString());
//                    int qtdAtt = GetEstoque - qtd;
//                    String getAtualizaqtde = Integer.toString(qtdAtt);
//                    obje = getAtualizaqtde;
//                    TableFindProduto.getModel().setValueAt(obje, setarNote, 7);
//                }
//
//            } else {
//
//                JOptionPane.showMessageDialog(null, "Nenhuma linha selecionada!!");
//
//            }
//        }
//
//        if (getselect == 4) {
//
//            ProdutosPP O = new ProdutosPP();
//            int setarOutros = tableOutros.getSelectedRow();
//
//            if (setarOutros >= 0) {
//                Object OPreco = tableOutros.getModel().getValueAt(setarOutros, 6);
//                String nPrecoFormated = OPreco.toString().replace(".", "").replace(",", ".");
//                qtd = (int) spnQtd.getValue();
//                preco = Double.parseDouble(nPrecoFormated);
//                txQtdeO.setText(spnQtd.getValue().toString());
//
//                superTotal = Double.parseDouble(PDV.txTotal.getText());
//                subtotal = qtd * preco;
//
//                total = superTotal + subtotal;
//
//                txSubtotalO.setText(String.valueOf(subtotal));
//
//                int GetEstoque = Integer.parseInt(tableOutros.getModel().getValueAt(setarOutros, 7).toString());
//
//                if (GetEstoque <= 0) {
//                    JOptionPane.showMessageDialog(null, "Produto sem estoque disponivel!!");
//                } else {
//
//                    O.setID(tableOutros.getModel().getValueAt(setarOutros, 0).toString());
//                    O.setProduto("Outros");
//                    O.setDescricao(tableOutros.getModel().getValueAt(setarOutros, 1).toString());
//                    O.setCodb(tableOutros.getModel().getValueAt(setarOutros, 2).toString());
//                    O.setSerial(tableOutros.getModel().getValueAt(setarOutros, 3).toString());
//                    O.setMarca(tableOutros.getModel().getValueAt(setarOutros, 4).toString());
//                    O.setPreco(tableOutros.getModel().getValueAt(setarOutros, 6).toString());
//                    O.setQtde(txQtdeO.getText());
//                    O.setSubtotal(txSubtotalO.getText());
//
//                    modelo = (ProdutosModels) TableCar.getModel();
//                    TableCar.setModel(modelo);
//                    modelo.addProdutosPP(O);
//                    PDV.txTotal.setText(String.valueOf(total));
//
//                    Object obj = new Object();
//
//                    int qtd = Integer.parseInt(spnQtd.getValue().toString());
//                    int qtdAtualizada = GetEstoque - qtd;
//                    String getAtualizaQTDE = Integer.toString(qtdAtualizada);
//                    obj = getAtualizaQTDE;
//                    tableOutros.getModel().setValueAt(obj, setarOutros, 7);
//
//                }
//
//            } else {
//
//                JOptionPane.showMessageDialog(null, "Nenhuma linha selecionada!!");
//
//            }
//        }
    }//GEN-LAST:event_buttonAddpromoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelectProdutosOrcamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelectProdutosOrcamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelectProdutosOrcamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelectProdutosOrcamento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SelectProdutosOrcamento().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane TabPanelProdutosorc;
    public static javax.swing.JTable TableFindProdutoOrc;
    private javax.swing.JButton buttonAddOrc;
    private javax.swing.JButton buttonAddpromo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane scrollOutros;
    private javax.swing.JSpinner spnQtd;
    public static javax.swing.JTable tableDesktopOrc;
    public static javax.swing.JTable tableMonitorOrc;
    public static javax.swing.JTable tableOutrosOrc;
    public static javax.swing.JTable tableServidorOrc;
    private textFieldSearch.TextFieldSearchOption txProcurar;
    private javax.swing.JTextField txQtdeN;
    private javax.swing.JTextField txQtdeO;
    private javax.swing.JTextField txSubtotalO;
    private javax.swing.JTextField txtSubtotalN;
    // End of variables declaration//GEN-END:variables
}
